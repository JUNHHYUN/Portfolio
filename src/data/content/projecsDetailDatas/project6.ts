export const project6 = {
   "name": "AI Writing Agent",
  "pointcolor": "before:bg-[#4a85c2]",
  "title": "사용자 중심 AI 글쓰기 시스템 개발",
  "subject": "기존 AI의 한계를 극복하고 사용자의 글쓰기 작업을 진정으로 돕는 개인화된 인공지능 시스템 개발 프로젝트로, AI의 해석 주도권을 사용자에게 부여하고 글쓰기 과정을 효율화하는 데 중점을 두었습니다.",
  "data": "프로젝트 기간 정보 없음",
  "team": "기여도 정보 없음",
  "tag": ["인공지능", "AI Agent", "생산성"],
  "giturl": 'https://github.com/DeaKipodol/memmo',
  "tools": [
    {
      "title": "FastAPI",
      "detail": "서버 프레임워크로, 클라이언트 단말기 연산 부하를 줄이고 효율성을 극대화하기 위한 서버-클라이언트 구조에 활용되었습니다. 비동기 처리 및 빠른 응답 속도를 제공합니다."
    },
    {
      "title": "MongoDB",
      "detail": "비정형 데이터 관리 용이성, 임베딩 벡터와 같은 고차원 데이터 관리, 높은 확장성 및 분산 처리를 위해 DB로 선정되었습니다. 사용자 대화 내용 및 요구사항 정보를 저장합니다."
    },
    {
      "title": "Pinecone",
      "detail": "벡터 저장소로 활용되어 MongoDB와 연동하여 주요 정보를 벡터화하고 보존하는 역할을 합니다. 긴 문맥에서도 맥락을 되살리는 구조에 기여합니다."
    },
    {
      "title": "LangGraph",
      "detail": "AI 에이전트의 기능 처리 흐름을 설계하는 데 사용된 워크플로우 프레임워크입니다. PlanPromptGenerator, TaskAgent, MergeAgent를 통해 글쓰기 전략 수립 및 자동화된 문서 생성을 구현했습니다."
    },
    {
      "title": "OpenAI API",
      "detail": "AI의 결과물을 생성하는 핵심 API로, LangGraph에서 수립된 전략을 바탕으로 최종 결과물을 도출하는 데 사용됩니다."
    }
  ],
  "featinfo": [
    "AI의 해석을 사용자가 직접 확인 및 수정하는 요구사항 편집",
    "대화 맥락 기반의 글쓰기 결과물 자동 생성",
    "8가지 필드를 통한 사용자 요구사항 구조화 및 구체화",
    "긴 대화에서도 문맥을 유지하는 기억 시스템",
    "EasyCommand를 통한 자주 쓰는 프롬프트 관리",
    "음성 인식을 통한 편리한 사용자 입력"
  ],
  "parts": [
    {
      "title": "기존 AI 시스템 문제점 분석 및 개선 방안 도출",
      "detailList": [
        "GPT 사용 시 발생하는 '원하는 결과가 안 나오면 계속 말을 바꿔야 함', '이전 대화 내용을 기억하지 못함', '답변 속도 저하' 등의 문제점 분석 및 정의."
      ]
    },
    {
      "title": "사용자 주도권 확보를 위한 요구사항 추출 및 편집 시스템 설계",
      "detailList": [
        "AI가 사용자의 말을 어떻게 이해했는지 명확히 보여주고 사용자가 직접 AI의 해석을 수정/결정할 수 있는 구조 개발.",
        "사용자 입력 직후 시스템이 자동으로 '목적, 대상, 톤' 등의 요구사항 필드를 채우고 사용자가 직접 수정할 수 있도록 구현.",
        "이 구조를 통해 'AI가 잘못 알아듣는 것 같은데 다시 뭐라고 말하지?'라는 스트레스를 해소하고 사용자에게 해석의 주도권 부여."
      ]
    },
    {
      "title": "작업 중심의 AI 기억 및 추론 시스템 구축",
      "detailList": [
        "AI가 단순히 대화를 이어가는 것이 아니라, '하나의 작업(Task)'을 중심으로 정보를 정확히 기억하고 사용자의 의도에 따라 직접 저장 및 수정할 수 있도록 설계.",
        "CoT(Chain of Thought) 기반 PlanPromptGenerator를 통해 글쓰기 전략을 세우고, TaskAgent들이 역할을 나눠 작성하며, MergeAgent가 통합하여 결과 생성.",
        "GPT의 토큰 누적 문제 해결을 위해 일정 간격마다 대화를 요약하고 저장하여 긴 문맥에서도 맥락을 유지."
      ]
    },
    {
      "title": "입력 편의성 강화를 위한 기능 구현",
      "detailList": [
        "자주 쓰는 프롬프트를 미리 등록하고 클릭 한 번으로 입력 가능한 'EasyCommand' 기능 개발.",
        "손으로 타이핑하지 않고 말로 바로 요청할 수 있는 음성 인식 기능 제공으로 입력 방식의 자유도 확보."
      ]
    },
    {
      "title": "시스템 아키텍처 설계 및 기술 스택 선정",
      "detailList": [
        "클라이언트(앱), FastAPI 서버, MongoDB + Pinecone(기억 저장소), LangGraph(기능 처리 흐름), OpenAI API(결과 생성)로 구성된 분산 구조 시스템 설계."
      ]
    }
  ]
};